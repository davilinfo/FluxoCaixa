// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Context;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(FluxoCaixaContext))]
    [Migration("20230730144324_FluxoCaixa")]
    partial class FluxoCaixa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.EF.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 30, 14, 43, 24, 196, DateTimeKind.Utc).AddTicks(9948));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 30, 14, 43, 24, 197, DateTimeKind.Utc).AddTicks(1006));

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Domain.EF.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 30, 14, 43, 24, 197, DateTimeKind.Utc).AddTicks(1811));

                    b.Property<Guid>("IdAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 30, 14, 43, 24, 197, DateTimeKind.Utc).AddTicks(2649));

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.ToTable("Balance");
                });

            modelBuilder.Entity("Domain.EF.Extract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 30, 14, 43, 24, 197, DateTimeKind.Utc).AddTicks(3484));

                    b.Property<Guid>("IdAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IdRecord")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.HasIndex("IdRecord");

                    b.ToTable("Extract");
                });

            modelBuilder.Entity("Domain.EF.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 30, 14, 43, 24, 197, DateTimeKind.Utc).AddTicks(4366));

                    b.Property<string>("History")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("IdAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IdAccount");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("Domain.EF.Balance", b =>
                {
                    b.HasOne("Domain.EF.Account", "IdAccountNavigation")
                        .WithMany()
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAccountNavigation");
                });

            modelBuilder.Entity("Domain.EF.Extract", b =>
                {
                    b.HasOne("Domain.EF.Account", "IdAccountNavigation")
                        .WithMany()
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.EF.Record", "IdRecordNavigation")
                        .WithMany()
                        .HasForeignKey("IdRecord");

                    b.Navigation("IdAccountNavigation");

                    b.Navigation("IdRecordNavigation");
                });

            modelBuilder.Entity("Domain.EF.Record", b =>
                {
                    b.HasOne("Domain.EF.Account", "IdAccountNavigation")
                        .WithMany()
                        .HasForeignKey("IdAccount")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdAccountNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
